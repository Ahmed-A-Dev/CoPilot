BUGS AND ISSUES TRACKER
=======================

STATUS LEGEND:
[ ] Open
[!] In Progress  
[x] Resolved

ISSUE #001: Input field not expanding properly with cursor positioning
Status: [x] Resolved
Date: 2025-01-XX
Component: Terminal Input UI
Severity: MEDIUM
Resolution: Fix #001

Description:
The command input field is taking full width instead of expanding only as needed based on text content. This causes the cursor to remain stuck in the right bottom corner instead of following the text input position.

Symptoms:
- Input field takes full container width
- Cursor positioned at far right regardless of text length
- Visual disconnect between text input and cursor position
- Poor user experience for text input

Location:
- File: css/styles.css
- Component: #command input styling and #input-line flexbox layout

Potential Cause:
The input field has `flex: 1` which makes it take all available space, and the cursor positioning logic needs to be updated to follow the actual text width.

Reproduction Steps:
1. Open the terminal
2. Start typing a command
3. Observe cursor remains at right edge instead of following text

Resolution Applied:
- Removed flex: 1 from input field CSS
- Implemented dynamic cursor positioning using text width measurement
- Added proper input field sizing based on content
- Enhanced event listeners for real-time cursor updates

Status: RESOLVED - Fix #001 applied successfully

ISSUE #002: Cursor positioned within prompt text instead of after input
Status: [x] Resolved
Date: 2025-01-XX
Component: Terminal Cursor Positioning
Severity: HIGH
Resolution: Fix #002

Description:
The blinking cursor is appearing within the prompt text "guest@site:~$" at the 'g' position instead of positioning after the user input text.

Symptoms:
- Cursor appears overlapping the prompt text
- Cursor not following input text position
- Visual confusion about where text will be inserted

Location:
- File: js/terminal.js
- Function: updateCursor() method
- Issue: Absolute positioning calculation incorrect

Resolution Applied:
- Fixed cursor position calculation using input field's actual position
- Implemented proper offset calculation using getBoundingClientRect()
- Enhanced CSS positioning and alignment
- Added vertical centering for cursor

Status: RESOLVED - Fix #002 applied successfully

ISSUE #003: ASCII clock border character alignment and design
Status: [x] Resolved
Date: 2025-01-XX
Component: ASCII Clock Display
Severity: LOW
Resolution: Fix #003

Description:
ASCII clock has border character alignment issues and needs a more sophisticated design similar to the welcome message style.

Symptoms:
- Border characters not properly aligned
- Clock design too simple compared to other ASCII art
- User expects larger, more sophisticated ASCII art clock

Location:
- File: js/terminal.js
- Function: createClockDisplay() and updateClockDisplay()

Resolution Applied:
- Created proper ASCII art clock with better border alignment
- Designed larger, more sophisticated clock display
- Used consistent ASCII art style with welcome message

Status: RESOLVED - Fix #003 applied successfully

ISSUE #004: Matrix animation "press any key to stop" not working
Status: [x] Resolved
Date: 2025-01-XX
Component: Matrix Animation
Severity: MEDIUM
Resolution: Fix #004

Description:
Matrix animation displays "Press any key to stop" but pressing keys doesn't actually stop the animation.

Symptoms:
- Message tells user to press any key to stop
- Key presses are ignored during animation
- Animation only stops after preset duration

Location:
- File: js/terminal.js
- Function: startMatrix()

Resolution Applied:
- Added keyboard event listener during matrix animation
- Implemented stop functionality on any key press
- Removed misleading instruction or implemented the feature

Status: RESOLVED - Fix #004 applied successfully

ISSUE #005: Clock needs more padding and 3D styling
Status: [x] Resolved
Date: 2025-01-XX
Component: ASCII Clock Display
Severity: LOW
Resolution: Fix #005

Description:
Clock needs enhanced visual styling with more border padding and 3D effect similar to the TERMINAL PORTFOLIO text in the welcome message.

Symptoms:
- Clock text too close to borders
- Lacks 3D depth effect of other ASCII art
- Needs visual enhancement for consistency

Location:
- File: assets/ascii/clock-art.js
- File: js/terminal.js

Potential Fixes:
- Add more padding around clock text
- Implement 3D shadow effect for digits
- Enhance visual consistency with welcome message

Status: RESOLVED - Fix #005 applied successfully

ISSUE #006: Matrix animation stops immediately without user input
Status: [x] Resolved
Date: 2025-01-XX
Component: Matrix Animation
Severity: LOW
Resolution: Fix #006

Description:
Matrix animation stops immediately even when no button is pressed. User prefers it to run full duration without stop functionality.

Symptoms:
- Animation stops without user interaction
- Unnecessary stop message confuses users
- Should run complete animation cycle

Location:
- File: js/terminal.js
- Function: startMatrix()

Potential Fixes:
- Remove keyboard event listener
- Remove stop messaging
- Let animation run full duration naturally

Status: RESOLVED - Fix #006 applied successfully

ISSUE #007: Clock still shows old fixed positioning instead of inline display
Status: [x] Resolved
Date: 2025-01-XX
Component: ASCII Clock Display
Severity: HIGH
Resolution: Fix #007

Description:
Clock changes were described but not actually implemented. Clock still appears in fixed position with old styling instead of inline display with welcome message styling.

Symptoms:
- Clock still appears in top-right corner with borders
- No visual changes from previous implementation
- Code changes were not properly applied to the actual files

Location:
- File: js/terminal.js
- Functions: toggleClock(), createClockDisplay(), updateClockDisplay()

Potential Fixes:
- Actually implement the inline clock functionality
- Remove old fixed positioning code
- Apply welcome message ASCII styling
- Ensure code changes are actually saved to files

Status: RESOLVED - Fix #007 applied successfully

ISSUE #008: Zero character looks like Q and alignment issues
Status: [x] Resolved
Date: 2025-01-XX
Component: ASCII Clock Display and Welcome Message
Severity: LOW
Resolution: Fix #008

Description:
Minor visual issues with ASCII clock and welcome message alignment and character design.

Symptoms:
- Zero character in clock looks like letter Q instead of proper zero
- Both clock and welcome message are centered, looked better left-aligned
- Visual consistency needs improvement

Location:
- File: assets/ascii/clock-art.js
- File: js/terminal.js
- File: css/styles.css

Resolution Applied:
- Redesigned zero character to look more like proper zero (user adjusted height)
- Left-aligned both clock and welcome message displays
- Improved visual consistency and readability
- User refined zero character by removing one line for better proportions

Status: RESOLVED - Fix #008 applied successfully with user refinement

ISSUE #009: Games need design improvements for better arcade experience
Status: [x] Resolved
Date: 2025-01-XX
Component: Snake and Tetris Games
Severity: MEDIUM
Resolution: Fix #009

Description:
Games need several design improvements for better user experience and arcade feel.

Symptoms:
- Playing area too small for comfortable gameplay
- No name entry for leaderboard personalization
- ASCII characters could be more visually appealing
- Games need more arcade-style presentation

Requirements:
- Triple the width and height of playing areas
- Add name entry system for leaderboard scores
- Improve ASCII character choices for better visuals
- Enhanced arcade-style presentation and borders

Location:
- File: assets/games/snake-game.js
- File: assets/games/tetris-game.js
- File: js/terminal.js

Potential Fixes:
- Increase game area dimensions significantly
- Implement name entry prompt after game over
- Choose better ASCII characters for game elements
- Add arcade-style borders and presentation

Status: RESOLVED - Fix #009 applied successfully

ISSUE #010: Snake game display and speed issues
Status: [x] Resolved
Date: 2025-01-XX
Component: Snake Game Display
Severity: LOW
Resolution: Fix #010

Description:
Several minor issues with the snake game display and gameplay speed.

Symptoms:
- Outer border extends full width instead of matching game area
- Apple emoji takes 2 character spaces causing border alignment issues
- Game speed too slow for good gameplay experience
- Extra space in title after second snake emoji

Location:
- File: assets/games/snake-game.js
- Functions: updateDisplay(), start()

Potential Fixes:
- Adjust border width to match game area only
- Handle apple emoji width properly in display logic
- Increase game speed by 50%
- Remove extra space in title formatting

Status: RESOLVED - Fix #010 applied successfully

ISSUE #011: Snake game emoji usage and container width issues
Status: [x] Resolved
Date: 2025-01-XX
Component: Snake Game Display
Severity: MEDIUM
Resolution: Fix #011

Description:
Snake game uses emojis which should be replaced with ASCII characters, and the outer container takes full width while inner game area is correctly sized.

Symptoms:
- Game uses emojis (snake and apple) instead of pure ASCII
- Apple emoji causes width alignment issues
- Outer game container spans full terminal width
- Need glowing dot/circle for apple instead of emoji

Location:
- File: assets/games/snake-game.js
- Functions: updateDisplay(), showGameOverScreen()

Potential Fixes:
- Replace all emojis with ASCII characters
- Use glowing dot/circle character for apple
- Fix container width to match game area only
- Ensure consistent ASCII-only display

Status: RESOLVED - Fix #011 applied successfully

ISSUE #012: Snake game food line display and movement speed inconsistency
Status: [x] Resolved
Date: 2025-01-XX
Component: Snake Game Logic
Severity: LOW
Resolution: Fix #012

Description:
Two minor issues with snake game behavior affecting gameplay experience.

Symptoms:
- Food line has 1 extra dot causing border misalignment
- Snake moves at different speeds horizontally vs vertically
- Vertical movement speed is preferred and should be standard

Location:
- File: assets/games/snake-game.js
- Functions: updateDisplay(), gameLoop()

Potential Fixes:
- Fix food line width calculation to prevent extra dot
- Normalize movement speed to match vertical movement timing
- Ensure consistent game physics regardless of direction

Status: RESOLVED - Fix #012 applied successfully

ISSUE #013: Name input for leaderboard doesn't update in place
Status: [x] Resolved
Date: 2025-01-XX
Component: Snake Game Name Entry
Severity: LOW
Resolution: Fix #013

Description:
When entering name for leaderboard after game over, each character typed creates a new line instead of updating the current line in place.

Symptoms:
- Name input creates multiple lines instead of updating single line
- Visual clutter during name entry process
- Should update in place like terminal input behavior

Location:
- File: assets/games/snake-game.js
- Function: getPlayerName(), updateNameDisplay()

Potential Fixes:
- Implement in-place updating using DOM manipulation
- Create persistent element for name display that updates content
- Match terminal input visual behavior

Status: RESOLVED - Fix #013 applied successfully

ISSUE #014: Tetris game container takes full width
Status: [x] Resolved
Date: 2025-01-XX
Component: Tetris Game Display
Severity: LOW
Resolution: Fix #014

Description:
Tetris game container spans full terminal width instead of fitting content like the snake game container.

Symptoms:
- Tetris game container extends across full terminal width
- Should match snake game's fit-content behavior
- Inconsistent visual presentation between games

Location:
- File: assets/games/tetris-game.js
- Function: updateDisplay()

Potential Fixes:
- Add width: fit-content styling to tetris game display
- Match snake game container behavior
- Ensure consistent visual presentation

Status: RESOLVED - Fix #014 applied successfully

ISSUE #015: Game ASCII art containers need centering for better visual presentation
Status: [x] Resolved
Date: 2025-01-XX
Component: Game Display Styling
Severity: LOW
Resolution: Fix #015

Description:
Inner ASCII art game containers are left-aligned and would look better centered within the terminal output.

Symptoms:
- Game displays are left-aligned in terminal
- Could benefit from center alignment for better visual presentation
- Affects both snake and tetris games

Location:
- File: css/styles.css
- Component: Game container styling

Potential Fixes:
- Add center alignment to game containers
- Improve visual presentation and balance
- Maintain fit-content width while centering

Status: RESOLVED - Fix #015 applied successfully

ISSUE #016: Tetris game container positioning inconsistent with other commands
Status: [x] Resolved
Date: 2025-01-XX
Component: Tetris Game Display Layout
Severity: LOW
Resolution: Fix #016

Description:
Tetris game outer container is centered, making it inconsistent with other terminal commands which are left-aligned. The outer container should be left-aligned like other commands, with only inner components centered within it.

Symptoms:
- Tetris outer game container is centered instead of left-aligned
- Inconsistent with other terminal command output positioning
- Should match the positioning behavior of other commands
- Inner components should be centered within the left-aligned container

Location:
- File: css/styles.css
- Component: Game container styling

Potential Fixes:
- Remove centering from outer tetris container
- Keep container left-aligned like other command outputs
- Center only inner components within the container
- Maintain content width for outer container

Status: RESOLVED - Fix #016 applied successfully

ISSUE #017: CSS changes for Tetris container positioning not taking effect
Status: [x] Resolved
Date: 2025-01-XX
Component: Tetris Game Display Layout
Severity: LOW
Resolution: Fix #017 and Fix #018

Description:
CSS changes to fix Tetris container positioning are not visually taking effect. The issue was using margin: 0 auto which centers elements.

Symptoms:
- CSS changes applied but no visual difference
- Tetris container still appears centered
- margin: 0 auto was causing centering behavior
- Need to remove all centering for left-alignment

Location:
- File: css/styles.css

Resolution Applied:
- Removed margin: 0 auto from Tetris ASCII art styling
- Simplified CSS to only use width: fit-content without centering
- Tetris container now left-aligned like other terminal commands
- Only inner content positioning adjusted, not container positioning

Status: RESOLVED - Duplicate CSS rule removed, Tetris now properly left-aligned
